package com.cf.tkconnect.csv;

import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.xmlrpc.client.XmlRpcClient;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;

import com.cf.tkconnect.util.FileUtils;
import com.cf.tkconnect.util.InitialSetUp;
import com.cf.tkconnect.util.PropertyManager;
import com.cf.tkconnect.util.WSConstants;
import com.cf.tkconnect.util.WSUtil;

public class OdooService {

	static com.cf.tkconnect.log.Log logger = com.cf.tkconnect.log.LogSource
			.getInstance(OdooService.class);
	
	String csvfilename;
	LoadCSVData csvdata;
	List<String> header_cols;
	Map<String,Object> pmap = new HashMap<String,Object>(); 
	public OdooService(String csvfilename) {
		this.csvfilename = csvfilename;
	}

	private void init() throws Exception{

		if(this.csvfilename== null || this.csvfilename.trim().length()==0)
			throw new Exception("No file found");
		csvdata = new LoadCSVData(this.csvfilename);
		Map<String, List<String>>   headers = this.csvdata.getHeaders();
		this.header_cols = headers.get("header_cols");
		//
		pmap.put("list_price", 12.0); 
        pmap.put("weight", 20.0); 
        pmap.put("description", "test 1"); 
        pmap.put("name", "books"); 
        pmap.put("active", true); 
        pmap.put("description_sale", "test 1"); 
        pmap.put("description_purchase", "test 1"); 
        pmap.put("default_code", "test 1"); 
        pmap.put("rental", false); 
        pmap.put("sale_ok", false); 
        pmap.put("volume", 50.0); 
        pmap.put("warranty", 34.0123);
	}
	
	public void process(){
		try{
			init();
			
			String url = getURL(InitialSetUp.odoo.get("url"));//"http://localhost:8069/xmlrpc/2/common";
			String username=InitialSetUp.odoo.get("username");
			String password =InitialSetUp.odoo.get("password");
	        String db =InitialSetUp.odoo.get("db");
	        /*
	        String username="cyrilaf@yahoo.com";
			String password ="123";
	        String db ="odoodb";
	        */
	        final XmlRpcClient client = new XmlRpcClient();
	        final XmlRpcClientConfigImpl common_config = new XmlRpcClientConfigImpl();
	        common_config.setServerURL(  new URL( url+"xmlrpc/2/common"));
	      
	        logger.debug(" check before :"+url+"   :"+username+"::"+password+":"+db+":");
	        Object obj = client.execute( common_config, "authenticate", Arrays.asList(
	        	        db, username, password, new HashMap()));
	        logger.debug("login result  :"+obj.toString());	
	        //after you get uid you need to use it        
	        int uid = 0;
	        try{
	        	uid = Integer.parseInt(obj.toString());
	        }catch(Exception e){
	        	logger.error(" Error login in check username/password ");
	        	return;
	        }
	        final XmlRpcClient models = new XmlRpcClient() {{
	            setConfig(new XmlRpcClientConfigImpl() {{
	                setServerURL(new URL(url+"xmlrpc/2/object"));
	            }});
	        }};
	        //String product= PropertyManager.getProperty("tkconnect.odoo.product_name");
	        String product = "product.template";
	        List<String[]> rows = this.csvdata.getAllDataRows();
	        int count = 0;
	        for(String[] row : rows){
	        	Map<String,Object> map = getNextRecord(row);
	        	 logger.debug(" sending data before :"+count+"  values :"+map);
	        	 final Integer cid = (Integer)models.execute("execute_kw", Arrays.asList(
	 	        	    db, uid, password,
	 	        	    product, "create",
	 	        	    Arrays.asList(map)
	 	        	));
	        	 count++;
	        logger.debug(" result after :"+count+" cr :"+cid );
	        }
	        
		}catch(Exception e){
			logger.error(e,e);
		}
		try{
			String today = WSUtil.getDateString();
			FileUtils.createDateDirs(today);
//			String outfile = FileUtils.getFileNameWithoutExtension(this.csvfilename)+"_response"+FileUtils.getFileExtension(this.csvfilename);
			FileUtils.moveFiles(FileUtils.InputFileServiceBaseDirectory,  FileUtils.ResponseFileServiceBaseDirectory+File.separator+today, 
					FileUtils.getFileName(this.csvfilename));
		}catch(Exception ee){
			logger.error(ee,ee);
		}
	}
	
	private String getURL(String url){
		if(url == null || url.trim().length()==0|| url.endsWith("/"))
			return url;
		return url+"/";
	}
	
	private Map<String,Object> getNextRecord(String[] row){
		Map<String,Object> map = new HashMap<String,Object>();
		if(row == null)
			return map;
		//TODO missing type info , int, date, String etc 
		for(int i = 0; i < this.header_cols.size(); i++){
			if(i < row.length){
				if(row[i]== null || row[i].trim().length()==0 ){
					continue;
				}
				String value = row[i].trim();
				Object objectType = pmap.get(this.header_cols.get(i));
				
				logger.debug("name  "+this.header_cols.get(i)+" val:"+value);
				if(objectType instanceof String){
					map.put(this.header_cols.get(i), value);
					logger.debug(" type String");
				}else if(objectType instanceof Boolean){
					int val = 0;
					if("true".equalsIgnoreCase(value) )
						val=1;
					map.put(this.header_cols.get(i), val);
					logger.debug(" type Boolean :: "+val);
				}else if(objectType instanceof Double){
					map.put(this.header_cols.get(i), new Double(value));
					logger.debug(" type Double");
				}else if(objectType instanceof Integer){
					map.put(this.header_cols.get(i), new Integer(value));
					logger.debug(" type Integer");
				}

				else {
					if(objectType == null)
						map.put(this.header_cols.get(i), value);
					else{
						logger.debug("getNextRecord  missed case type :"+this.header_cols.get(i)+" type:"+objectType.getClass().getName()+"  not accounted for." );
					}
				}
				
			}
		}
		
		return map;
	}
	
	
	
	
}
